[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Mumuksha’s Website",
    "section": "",
    "text": "Hello! My name is Mumuksha Singla and this is my website for my Data Visualisation (EPPS 6356) class."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Assignment1.html",
    "href": "Assignment1.html",
    "title": "Assignment 1",
    "section": "",
    "text": "## Q1) \n## Anscombe (1973) Quartlet\n\ndata(anscombe)  # Load Anscombe's data\n#View(anscombe) # View the data\nsummary(anscombe)\n\n       x1             x2             x3             x4           y1        \n Min.   : 4.0   Min.   : 4.0   Min.   : 4.0   Min.   : 8   Min.   : 4.260  \n 1st Qu.: 6.5   1st Qu.: 6.5   1st Qu.: 6.5   1st Qu.: 8   1st Qu.: 6.315  \n Median : 9.0   Median : 9.0   Median : 9.0   Median : 8   Median : 7.580  \n Mean   : 9.0   Mean   : 9.0   Mean   : 9.0   Mean   : 9   Mean   : 7.501  \n 3rd Qu.:11.5   3rd Qu.:11.5   3rd Qu.:11.5   3rd Qu.: 8   3rd Qu.: 8.570  \n Max.   :14.0   Max.   :14.0   Max.   :14.0   Max.   :19   Max.   :10.840  \n       y2              y3              y4        \n Min.   :3.100   Min.   : 5.39   Min.   : 5.250  \n 1st Qu.:6.695   1st Qu.: 6.25   1st Qu.: 6.170  \n Median :8.140   Median : 7.11   Median : 7.040  \n Mean   :7.501   Mean   : 7.50   Mean   : 7.501  \n 3rd Qu.:8.950   3rd Qu.: 7.98   3rd Qu.: 8.190  \n Max.   :9.260   Max.   :12.74   Max.   :12.500  \n\n## Simple version\nplot(anscombe$x1,anscombe$y1)\nsummary(anscombe)\n\n       x1             x2             x3             x4           y1        \n Min.   : 4.0   Min.   : 4.0   Min.   : 4.0   Min.   : 8   Min.   : 4.260  \n 1st Qu.: 6.5   1st Qu.: 6.5   1st Qu.: 6.5   1st Qu.: 8   1st Qu.: 6.315  \n Median : 9.0   Median : 9.0   Median : 9.0   Median : 8   Median : 7.580  \n Mean   : 9.0   Mean   : 9.0   Mean   : 9.0   Mean   : 9   Mean   : 7.501  \n 3rd Qu.:11.5   3rd Qu.:11.5   3rd Qu.:11.5   3rd Qu.: 8   3rd Qu.: 8.570  \n Max.   :14.0   Max.   :14.0   Max.   :14.0   Max.   :19   Max.   :10.840  \n       y2              y3              y4        \n Min.   :3.100   Min.   : 5.39   Min.   : 5.250  \n 1st Qu.:6.695   1st Qu.: 6.25   1st Qu.: 6.170  \n Median :8.140   Median : 7.11   Median : 7.040  \n Mean   :7.501   Mean   : 7.50   Mean   : 7.501  \n 3rd Qu.:8.950   3rd Qu.: 7.98   3rd Qu.: 8.190  \n Max.   :9.260   Max.   :12.74   Max.   :12.500  \n\n# Create four model objects\nlm1 &lt;- lm(y1 ~ x1, data=anscombe)\nsummary(lm1)\n\n\nCall:\nlm(formula = y1 ~ x1, data = anscombe)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1.92127 -0.45577 -0.04136  0.70941  1.83882 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)   \n(Intercept)   3.0001     1.1247   2.667  0.02573 * \nx1            0.5001     0.1179   4.241  0.00217 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.237 on 9 degrees of freedom\nMultiple R-squared:  0.6665,    Adjusted R-squared:  0.6295 \nF-statistic: 17.99 on 1 and 9 DF,  p-value: 0.00217\n\nlm2 &lt;- lm(y2 ~ x2, data=anscombe)\nsummary(lm2)\n\n\nCall:\nlm(formula = y2 ~ x2, data = anscombe)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-1.9009 -0.7609  0.1291  0.9491  1.2691 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)   \n(Intercept)    3.001      1.125   2.667  0.02576 * \nx2             0.500      0.118   4.239  0.00218 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.237 on 9 degrees of freedom\nMultiple R-squared:  0.6662,    Adjusted R-squared:  0.6292 \nF-statistic: 17.97 on 1 and 9 DF,  p-value: 0.002179\n\nlm3 &lt;- lm(y3 ~ x3, data=anscombe)\nsummary(lm3)\n\n\nCall:\nlm(formula = y3 ~ x3, data = anscombe)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-1.1586 -0.6146 -0.2303  0.1540  3.2411 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)   \n(Intercept)   3.0025     1.1245   2.670  0.02562 * \nx3            0.4997     0.1179   4.239  0.00218 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.236 on 9 degrees of freedom\nMultiple R-squared:  0.6663,    Adjusted R-squared:  0.6292 \nF-statistic: 17.97 on 1 and 9 DF,  p-value: 0.002176\n\nlm4 &lt;- lm(y4 ~ x4, data=anscombe)\nsummary(lm4)\n\n\nCall:\nlm(formula = y4 ~ x4, data = anscombe)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n-1.751 -0.831  0.000  0.809  1.839 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)   \n(Intercept)   3.0017     1.1239   2.671  0.02559 * \nx4            0.4999     0.1178   4.243  0.00216 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.236 on 9 degrees of freedom\nMultiple R-squared:  0.6667,    Adjusted R-squared:  0.6297 \nF-statistic:    18 on 1 and 9 DF,  p-value: 0.002165\n\nplot(anscombe$x1,anscombe$y1)\nabline(coefficients(lm1))\n\n\n\nplot(anscombe$x2,anscombe$y2)\nabline(coefficients(lm2))\n\n\n\nplot(anscombe$x3,anscombe$y3)\nabline(coefficients(lm3))\n\n\n\nplot(anscombe$x4,anscombe$y4)\nabline(coefficients(lm4))\n\n\n\n## Fancy version (per help file)\n\nff &lt;- y ~ x\nmods &lt;- setNames(as.list(1:4), paste0(\"lm\", 1:4))\n\n# Plot using for loop\nfor(i in 1:4) {\n  ff[2:3] &lt;- lapply(paste0(c(\"y\",\"x\"), i), as.name)\n  ## or   ff[[2]] &lt;- as.name(paste0(\"y\", i))\n  ##      ff[[3]] &lt;- as.name(paste0(\"x\", i))\n  mods[[i]] &lt;- lmi &lt;- lm(ff, data = anscombe)\n  print(anova(lmi))\n}\n\nAnalysis of Variance Table\n\nResponse: y1\n          Df Sum Sq Mean Sq F value  Pr(&gt;F)   \nx1         1 27.510 27.5100   17.99 0.00217 **\nResiduals  9 13.763  1.5292                   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\nAnalysis of Variance Table\n\nResponse: y2\n          Df Sum Sq Mean Sq F value   Pr(&gt;F)   \nx2         1 27.500 27.5000  17.966 0.002179 **\nResiduals  9 13.776  1.5307                    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\nAnalysis of Variance Table\n\nResponse: y3\n          Df Sum Sq Mean Sq F value   Pr(&gt;F)   \nx3         1 27.470 27.4700  17.972 0.002176 **\nResiduals  9 13.756  1.5285                    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\nAnalysis of Variance Table\n\nResponse: y4\n          Df Sum Sq Mean Sq F value   Pr(&gt;F)   \nx4         1 27.490 27.4900  18.003 0.002165 **\nResiduals  9 13.742  1.5269                    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nsapply(mods, coef)  # Note the use of this function\n\n                  lm1      lm2       lm3       lm4\n(Intercept) 3.0000909 3.000909 3.0024545 3.0017273\nx1          0.5000909 0.500000 0.4997273 0.4999091\n\nlapply(mods, function(fm) coef(summary(fm)))\n\n$lm1\n             Estimate Std. Error  t value    Pr(&gt;|t|)\n(Intercept) 3.0000909  1.1247468 2.667348 0.025734051\nx1          0.5000909  0.1179055 4.241455 0.002169629\n\n$lm2\n            Estimate Std. Error  t value    Pr(&gt;|t|)\n(Intercept) 3.000909  1.1253024 2.666758 0.025758941\nx2          0.500000  0.1179637 4.238590 0.002178816\n\n$lm3\n             Estimate Std. Error  t value    Pr(&gt;|t|)\n(Intercept) 3.0024545  1.1244812 2.670080 0.025619109\nx3          0.4997273  0.1178777 4.239372 0.002176305\n\n$lm4\n             Estimate Std. Error  t value    Pr(&gt;|t|)\n(Intercept) 3.0017273  1.1239211 2.670763 0.025590425\nx4          0.4999091  0.1178189 4.243028 0.002164602\n\n# Preparing for the plots\nop &lt;- par(mfrow = c(2, 2), mar = 0.1+c(4,4,1,1), oma =  c(0, 0, 2, 0))\n\n# Plot charts using for loop\nfor(i in 1:4) {\n  ff[2:3] &lt;- lapply(paste0(c(\"y\",\"x\"), i), as.name)\n  plot(ff, data = anscombe, col = \"red\", pch = 21, bg = \"orange\", cex = 1.2,\n       xlim = c(3, 19), ylim = c(3, 13))\n  abline(mods[[i]], col = \"blue\")\n}\nmtext(\"Anscombe's 4 Regression data sets\", outer = TRUE, cex = 1.5)\n\n\n\npar(op)\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n#Q2)\n\n\n\n\nGenerative Art Example 1\n\n\nPedersen, T. L. (2020). Generative Art by Thomas Lin Pedersen. Retrieved September 13, 2023, from Data Imaginist website: https://www.data-imaginist.com/art ‌\n\n\n\nGenerative Art Example 2\n\n\nBailey, J. (2018, August 26). Artnome. Retrieved September 13, 2023, from Artnome website: https://www.artnome.com/news/2018/8/8/why-love-generative-art ‌\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n#Q3)\n\n# Title Fall color\n# Credit: https://fronkonstin.com\n\n# Install packages\n\n#install.packages(\"gsubfn\")\n#install.packages(\"tidyverse\")\nlibrary(gsubfn)\n\nLoading required package: proto\n\n\nWarning in doTryCatch(return(expr), name, parentenv, handler): unable to load shared object '/Library/Frameworks/R.framework/Resources/modules//R_X11.so':\n  dlopen(/Library/Frameworks/R.framework/Resources/modules//R_X11.so, 0x0006): Library not loaded: /opt/X11/lib/libSM.6.dylib\n  Referenced from: &lt;B3716E5A-BF4D-3CA3-B8EB-89643DB72A04&gt; /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/modules/R_X11.so\n  Reason: tried: '/opt/X11/lib/libSM.6.dylib' (no such file), '/System/Volumes/Preboot/Cryptexes/OS/opt/X11/lib/libSM.6.dylib' (no such file), '/opt/X11/lib/libSM.6.dylib' (no such file), '/Library/Frameworks/R.framework/Resources/lib/libSM.6.dylib' (no such file), '/Library/Java/JavaVirtualMachines/jdk-11.0.18+10/Contents/Home/lib/server/libSM.6.dylib' (no such file)\n\n\ntcltk DLL is linked to '/opt/X11/lib/libX11.6.dylib'\n\n\nCould not load tcltk.  Will use slower R code instead.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# Define elements in plant art\n# Each image corresponds to a different axiom, rules, angle and depth\n\n# Leaf of Fall\n\naxiom=\"X\"\nrules=list(\"X\"=\"F-[[X]+X]+F[+FX]-X\", \"F\"=\"FF\")\nangle=22.5\ndepth=6\n\n\nfor (i in 1:depth) axiom=gsubfn(\".\", rules, axiom)\n\nactions=str_extract_all(axiom, \"\\\\d*\\\\+|\\\\d*\\\\-|F|L|R|\\\\[|\\\\]|\\\\|\") %&gt;% unlist\n\nstatus=data.frame(x=numeric(0), y=numeric(0), alfa=numeric(0))\npoints=data.frame(x1 = 0, y1 = 0, x2 = NA, y2 = NA, alfa=90, depth=1)\n\n\n# Generating data\n# Note: may take a minute or two\n\nfor (action in actions)\n{\n  if (action==\"F\")\n  {\n    x=points[1, \"x1\"]+cos(points[1, \"alfa\"]*(pi/180))\n    y=points[1, \"y1\"]+sin(points[1, \"alfa\"]*(pi/180))\n    points[1,\"x2\"]=x\n    points[1,\"y2\"]=y\n    data.frame(x1 = x, y1 = y, x2 = NA, y2 = NA,\n               alfa=points[1, \"alfa\"],\n               depth=points[1,\"depth\"]) %&gt;% rbind(points)-&gt;points\n  }\n  if (action %in% c(\"+\", \"-\")){\n    alfa=points[1, \"alfa\"]\n    points[1, \"alfa\"]=eval(parse(text=paste0(\"alfa\",action, angle)))\n  }\n  if(action==\"[\"){\n    data.frame(x=points[1, \"x1\"], y=points[1, \"y1\"], alfa=points[1, \"alfa\"]) %&gt;%\n      rbind(status) -&gt; status\n    points[1, \"depth\"]=points[1, \"depth\"]+1\n  }\n\n  if(action==\"]\"){\n    depth=points[1, \"depth\"]\n    points[-1,]-&gt;points\n    data.frame(x1=status[1, \"x\"], y1=status[1, \"y\"], x2=NA, y2=NA,\n               alfa=status[1, \"alfa\"],\n               depth=depth-1) %&gt;%\n      rbind(points) -&gt; points\n    status[-1,]-&gt;status\n  }\n}\n\nggplot() +\n  geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2),\n               lineend = \"round\",\n               color=\"darkseagreen\", # Set your own Fall color?\n               data=na.omit(points)) +\n  coord_fixed(ratio = 1) +\n  theme_void() # No grid nor axes\n\n\n\n\n------------------------------------------------------------------------------------------\n------------------------------------------------------------------------------------------\n\n\n\n#Q4)\n\n#This visualization investigates which nations generated the most plastic garbage in 2010 and #what proportion of it was mismanaged, but more importantly, it examines how this management #relates to the country's GDP per capita. \n\n#On the left of the graph, we can see the distribution of total plastic waste generation by each continent. The chart then segregates based on the country and the values are measured in #ascending order measuring tonnes per year.\n\n#The right side follows into an estimation of the total percentage of waste that was inadequately disposed of which includes open disposal, uncontrolled landfills, and more. As the waste is not adequately disposed of the chances of it contaminating surrounding areas ncrease meaning the waste finds its way into oceans through winds, tides, or waterways. \n\n#Lastly, the extreme right of the chart shows every country's GDP per capita, which tells us about its national wealth and infrastructure - both of which have a crucial bearing on waste management.\n\n\n\n\n\n\n\n\nWho is Bottling Plastic Waste Pollution\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"
  },
  {
    "objectID": "Assignment2.html",
    "href": "Assignment2.html",
    "title": "Assignment 2",
    "section": "",
    "text": "### Paul Murrell's R examples (selected)\n\n## Start plotting from basics \n# Note the order\nplot(pressure, pch=12)  # Can you change pch? Changed from 16 to 12\ntext(150, 600, \n     \"Pressure (mm Hg)\\nversus\\nTemperature (Celsius)\")\n\n\n\n#  Examples of standard high-level plots \n#  In each case, extra output is also added using low-level \n#  plotting functions.\n# \n\n# Setting the parameter (3 rows by 2 cols)\npar(mfrow=c(3, 2))\n\n# Scatterplot\n# Note the incremental additions\n\n\nx &lt;- c(0.5, 2, 4, 8, 12, 16)\ny1 &lt;- c(1, 1.3, 1.9, 3.4, 3.9, 4.8)\ny2 &lt;- c(4, .8, .5, .45, .4, .3)\n# Setting label orientation, margins c(bottom, left, top, right) & text size\npar(las=1, mar=c(4, 4, 2, 4), cex=.7) \nplot.new()\nplot.window(range(x), c(0, 6))\nlines(x, y1)\nlines(x, y2)\npoints(x, y1, pch=16, cex=1.5) # Try different cex value?  \npoints(x, y2, pch=21, bg=\"wheat\", cex=2)  # Different background color\npar(col=\"gray50\", fg=\"gray50\", col.axis=\"gray50\")\naxis(1, at=seq(0, 16, 4)) # What is the first number standing for?\n#The value 1 indicates that we are referring to the x-axis)\naxis(2, at=seq(0, 6, 2))\naxis(4, at=seq(0, 6, 2))\nbox(bty=\"u\")\nmtext(\"Travel Time (s)\", side=1, line=2, cex=0.8)\nmtext(\"Responses per Travel\", side=2, line=2, las=0, cex=0.8)\nmtext(\"Responses per Second\", side=4, line=2, las=0, cex=0.8)\ntext(4, 5, \"Bird 131\")\n\n\n\npar(mar=c(5.1, 4.1, 4.1, 2.1), col=\"black\", fg=\"black\", col.axis=\"black\")\n\n\n# Histogram\n# Random data\nY &lt;- rnorm(50)\n# Make sure no Y exceed [-3.5, 3.5]\nY[Y &lt; -3.5 | Y &gt; 3.5] &lt;- NA # Selection/set range\nx &lt;- seq(-3.5, 3.5, .1)\ndn &lt;- dnorm(x)\npar(mar=c(4.5, 4.1, 3.1, 0))\nhist(Y, breaks=seq(-3.5, 3.5), ylim=c(0, 0.5), \n     col=\"gray80\", freq=FALSE)\nlines(x, dnorm(x), lwd=2)\n\n\n\npar(mar=c(5.1, 4.1, 4.1, 2.1))\n\n\n# Barplot\npar(mar=c(2, 3.1, 2, 2.1)) \nmidpts &lt;- barplot(VADeaths, \n                  col=gray(0.1 + seq(1, 9, 2)/11), \n                  names=rep(\"\", 4))\nmtext(sub(\" \", \"\\n\", colnames(VADeaths)),\n      at=midpts, side=1, line=0.5, cex=0.5)\ntext(rep(midpts, each=5), apply(VADeaths, 2, cumsum) - VADeaths/2,\n     VADeaths, \n     col=rep(c(\"white\", \"black\"), times=3:2), \n     cex=0.8)\n\n\n\npar(mar=c(5.1, 4.1, 4.1, 2.1))  \n\n\n# Boxplot\npar(mar=c(3, 4.1, 2, 0))\nboxplot(len ~ dose, data = ToothGrowth,\n        boxwex = 0.25, at = 1:3 - 0.2,\n        subset= supp == \"VC\", col=\"white\",\n        xlab=\"\",\n        ylab=\"tooth length\", ylim=c(0,35))\nmtext(\"Vitamin C dose (mg)\", side=1, line=2.5, cex=0.8)\nboxplot(len ~ dose, data = ToothGrowth, add = TRUE,\n        boxwex = 0.25, at = 1:3 + 0.2,\n        \n        subset= supp == \"OJ\")\nlegend(1.5, 9, c(\"Ascorbic acid\", \"Orange juice\"), \n       fill = c(\"white\", \"gray\"), \n       bty=\"n\")\n\n\n\npar(mar=c(5.1, 4.1, 4.1, 2.1))\n\n\n# Persp\nx &lt;- seq(-10, 10, length= 30)\ny &lt;- x\nf &lt;- function(x,y) { r &lt;- sqrt(x^2+y^2); 10 * sin(r)/r }\nz &lt;- outer(x, y, f)\nz[is.na(z)] &lt;- 1\n# 0.5 to include z axis label\npar(mar=c(0, 0.5, 0, 0), lwd=0.5)\npersp(x, y, z, theta = 30, phi = 30, \n      expand = 0.5)\n\n\n\npar(mar=c(5.1, 4.1, 4.1, 2.1), lwd=1)\n\n# Piechart\npar(mar=c(0, 2, 1, 2), xpd=FALSE, cex=0.5)\npie.sales &lt;- c(0.12, 0.3, 0.26, 0.16, 0.04, 0.12)\nnames(pie.sales) &lt;- c(\"Blueberry\", \"Cherry\",\n                      \"Apple\", \"Boston Cream\", \"Other\", \"Vanilla\")\npie(pie.sales, col = gray(seq(0.3,1.0,length=6))) \n\n\n\n\n\nlibrary(readr)\nhpindex &lt;- read_csv(\"hpi3.csv\") #import the csv file\n\nRows: 152 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): COUNTRY, ISO, GDP PER CAPITA\ndbl (8): RANK, CONTINENT, POPU 1000s, LIFE EXPECTANCY, WELL BEING, ECOLOGICA...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nlifeexpec &lt;- hpindex$`LIFE EXPECTANCY`\nhpi &lt;- hpindex$HPI\ngdp &lt;- hpindex$`GDP PER CAPITA`\nwebg &lt;- hpindex$`WELL BEING`\necofoot &lt;- hpindex$`ECOLOGICAL FOOTPRINT`\ncont &lt;- hpindex$CONTINENT\n\n# Scatterplot\nplot(lifeexpec, hpi, xlab = \"Life Expectancy\", ylab = \"Happy Planet Index\", pch=22, bg=\"lightblue\")\ntitle(\"Scatterplot: Life Expectancy vs. HPI\")\n\n\n\n#xlabel &lt;- \"Life Expectancy\"\n#ylabel &lt;- \"Happy Planet Index\"\n#text((lifeexpec),(hpi), labels = c(xlabel, ylabel), pos = 0.5)\n\n\nx &lt;- c(3, 1, 2, 4, 5)\ny1 &lt;- c(77.3, 80.3, 70.5, 83.8, 77.0)\ny2 &lt;- c(60.2, 62.1,60.4, 60.1, 58.8)\n\nplot(x, y1, pch=15, axes=FALSE, xlab=\"\", ylab=\"\", ylim=c(0,100),col=\"hotpink4\", main=\"Top 5 Countries (HPI & Life Expectancy)\")\naxis(2, ylim=c(0,10),col=\"black\",las=1)\nmtext(\"Life Expectancy\",side=2,line=2.5)\nbox()\n\npar(new=TRUE)\n\nplot(x, y2, pch=16,  xlab=\"\", ylab=\"\", ylim=c(0,100), \n     axes=FALSE, col=\"olivedrab\")\n\nmtext(\"Happiness Index\",side=4,line=3) \naxis(4, ylim=c(0,100), col=\"blue\",col.axis=\"blue\",las=1)\n\naxis(1, at= seq(0, 5, 1))\nmtext(\"Country\",side=1,col=\"black\",line=2.5) \n\nlines(x, y1, type = \"o\", col = \"hotpink4\")\n\nlines(x, y2, type = \"o\", col = \"olivedrab\")\n\n\nlegend(\"bottomright\",legend=c(\"1: Costa Rica\",\"2:Vanuatu\", \"3:Colombia\", \"4:Switzerland\",\"5:Ecuador\"))\n\n\n\n\n\n#barplot\nlibrary(ggplot2)\n\ndata &lt;- data.frame(\n  continent = c(\"Latin America\", \"N. America and Oceania\", \"Western Europe\", \"Middle East\",\n                 \"Africa\", \"South Asia\", \"Eastern Europe and Central Asia\", \"East Asia\"),\n  meanHPI = c(44.8, 45.6, 44.4, 44.7, 43.8, 44.6, 44.5, 44.5)\n)\n\nggplot(data, aes(x = continent, y = meanHPI, fill = \"Green\")) +\n  geom_bar(stat = \"identity\") +\n  ylim(0, 46) +\n  geom_text(aes(label = meanHPI), vjust = -0.5, size = 3) + # Add labels above bars\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +   # Rotate x-axis labels\n  scale_fill_manual(values = \"palegreen4\") +  # Set bar color to green\n  labs(fill = \"Continents\")  # Remove the legend title for fill\n\n\n\n\n\n#piechart\nx &lt;- c(300991, 204169, 1092620, 478310, 172329, 46536, 607281, 366241)\nlabels &lt;- c(\"L America\",\"N. America and Oceania\",\"W Europe\",\"ME Asiat\",\n         \"Africa\",\"S Asia\", \"E Europe and C Asia\", \"E Asia\")\n\n# Give the chart file a name.\n#png(file = \"city_title_colours.jpg\")\n\n# Plot the chart with title and rainbow color pallet.\npie(x, labels, main = \"GDP Pie Chart\", col = rainbow(length(x)))"
  },
  {
    "objectID": "Assignment3.html",
    "href": "Assignment3.html",
    "title": "Assignment 3",
    "section": "",
    "text": "## QUESTION 1\n## Anscombe (1973) Quartlet\n\ndata(anscombe)  # Load Anscombe's data\n#View(anscombe) # View the data\nsummary(anscombe)\n\n       x1             x2             x3             x4           y1        \n Min.   : 4.0   Min.   : 4.0   Min.   : 4.0   Min.   : 8   Min.   : 4.260  \n 1st Qu.: 6.5   1st Qu.: 6.5   1st Qu.: 6.5   1st Qu.: 8   1st Qu.: 6.315  \n Median : 9.0   Median : 9.0   Median : 9.0   Median : 8   Median : 7.580  \n Mean   : 9.0   Mean   : 9.0   Mean   : 9.0   Mean   : 9   Mean   : 7.501  \n 3rd Qu.:11.5   3rd Qu.:11.5   3rd Qu.:11.5   3rd Qu.: 8   3rd Qu.: 8.570  \n Max.   :14.0   Max.   :14.0   Max.   :14.0   Max.   :19   Max.   :10.840  \n       y2              y3              y4        \n Min.   :3.100   Min.   : 5.39   Min.   : 5.250  \n 1st Qu.:6.695   1st Qu.: 6.25   1st Qu.: 6.170  \n Median :8.140   Median : 7.11   Median : 7.040  \n Mean   :7.501   Mean   : 7.50   Mean   : 7.501  \n 3rd Qu.:8.950   3rd Qu.: 7.98   3rd Qu.: 8.190  \n Max.   :9.260   Max.   :12.74   Max.   :12.500  \n\n## Simple version\nplot(anscombe$x1,anscombe$y1)\nsummary(anscombe)\n\n       x1             x2             x3             x4           y1        \n Min.   : 4.0   Min.   : 4.0   Min.   : 4.0   Min.   : 8   Min.   : 4.260  \n 1st Qu.: 6.5   1st Qu.: 6.5   1st Qu.: 6.5   1st Qu.: 8   1st Qu.: 6.315  \n Median : 9.0   Median : 9.0   Median : 9.0   Median : 8   Median : 7.580  \n Mean   : 9.0   Mean   : 9.0   Mean   : 9.0   Mean   : 9   Mean   : 7.501  \n 3rd Qu.:11.5   3rd Qu.:11.5   3rd Qu.:11.5   3rd Qu.: 8   3rd Qu.: 8.570  \n Max.   :14.0   Max.   :14.0   Max.   :14.0   Max.   :19   Max.   :10.840  \n       y2              y3              y4        \n Min.   :3.100   Min.   : 5.39   Min.   : 5.250  \n 1st Qu.:6.695   1st Qu.: 6.25   1st Qu.: 6.170  \n Median :8.140   Median : 7.11   Median : 7.040  \n Mean   :7.501   Mean   : 7.50   Mean   : 7.501  \n 3rd Qu.:8.950   3rd Qu.: 7.98   3rd Qu.: 8.190  \n Max.   :9.260   Max.   :12.74   Max.   :12.500  \n\n# Create four model objects\nlm1 &lt;- lm(y1 ~ x1, data=anscombe)\nsummary(lm1)\n\n\nCall:\nlm(formula = y1 ~ x1, data = anscombe)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1.92127 -0.45577 -0.04136  0.70941  1.83882 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)   \n(Intercept)   3.0001     1.1247   2.667  0.02573 * \nx1            0.5001     0.1179   4.241  0.00217 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.237 on 9 degrees of freedom\nMultiple R-squared:  0.6665,    Adjusted R-squared:  0.6295 \nF-statistic: 17.99 on 1 and 9 DF,  p-value: 0.00217\n\nlm2 &lt;- lm(y2 ~ x2, data=anscombe)\nsummary(lm2)\n\n\nCall:\nlm(formula = y2 ~ x2, data = anscombe)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-1.9009 -0.7609  0.1291  0.9491  1.2691 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)   \n(Intercept)    3.001      1.125   2.667  0.02576 * \nx2             0.500      0.118   4.239  0.00218 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.237 on 9 degrees of freedom\nMultiple R-squared:  0.6662,    Adjusted R-squared:  0.6292 \nF-statistic: 17.97 on 1 and 9 DF,  p-value: 0.002179\n\nlm3 &lt;- lm(y3 ~ x3, data=anscombe)\nsummary(lm3)\n\n\nCall:\nlm(formula = y3 ~ x3, data = anscombe)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-1.1586 -0.6146 -0.2303  0.1540  3.2411 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)   \n(Intercept)   3.0025     1.1245   2.670  0.02562 * \nx3            0.4997     0.1179   4.239  0.00218 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.236 on 9 degrees of freedom\nMultiple R-squared:  0.6663,    Adjusted R-squared:  0.6292 \nF-statistic: 17.97 on 1 and 9 DF,  p-value: 0.002176\n\nlm4 &lt;- lm(y4 ~ x4, data=anscombe)\nsummary(lm4)\n\n\nCall:\nlm(formula = y4 ~ x4, data = anscombe)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n-1.751 -0.831  0.000  0.809  1.839 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)   \n(Intercept)   3.0017     1.1239   2.671  0.02559 * \nx4            0.4999     0.1178   4.243  0.00216 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.236 on 9 degrees of freedom\nMultiple R-squared:  0.6667,    Adjusted R-squared:  0.6297 \nF-statistic:    18 on 1 and 9 DF,  p-value: 0.002165\n\nplot(anscombe$x1,anscombe$y1)\nabline(coefficients(lm1))\n\n\n\nplot(anscombe$x2,anscombe$y2)\nabline(coefficients(lm2))\n\n\n\nplot(anscombe$x3,anscombe$y3)\nabline(coefficients(lm3))\n\n\n\nplot(anscombe$x4,anscombe$y4)\nabline(coefficients(lm4))\n\n\n\n## Fancy version (per help file)\n\nff &lt;- y ~ x\nmods &lt;- setNames(as.list(1:4), paste0(\"lm\", 1:4))\n\n# Plot using for loop\nfor(i in 1:4) {\n  ff[2:3] &lt;- lapply(paste0(c(\"y\",\"x\"), i), as.name)\n  ## or   ff[[2]] &lt;- as.name(paste0(\"y\", i))\n  ##      ff[[3]] &lt;- as.name(paste0(\"x\", i))\n  mods[[i]] &lt;- lmi &lt;- lm(ff, data = anscombe)\n  print(anova(lmi))\n}\n\nAnalysis of Variance Table\n\nResponse: y1\n          Df Sum Sq Mean Sq F value  Pr(&gt;F)   \nx1         1 27.510 27.5100   17.99 0.00217 **\nResiduals  9 13.763  1.5292                   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\nAnalysis of Variance Table\n\nResponse: y2\n          Df Sum Sq Mean Sq F value   Pr(&gt;F)   \nx2         1 27.500 27.5000  17.966 0.002179 **\nResiduals  9 13.776  1.5307                    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\nAnalysis of Variance Table\n\nResponse: y3\n          Df Sum Sq Mean Sq F value   Pr(&gt;F)   \nx3         1 27.470 27.4700  17.972 0.002176 **\nResiduals  9 13.756  1.5285                    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\nAnalysis of Variance Table\n\nResponse: y4\n          Df Sum Sq Mean Sq F value   Pr(&gt;F)   \nx4         1 27.490 27.4900  18.003 0.002165 **\nResiduals  9 13.742  1.5269                    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nsapply(mods, coef)  # Note the use of this function\n\n                  lm1      lm2       lm3       lm4\n(Intercept) 3.0000909 3.000909 3.0024545 3.0017273\nx1          0.5000909 0.500000 0.4997273 0.4999091\n\nlapply(mods, function(fm) coef(summary(fm)))\n\n$lm1\n             Estimate Std. Error  t value    Pr(&gt;|t|)\n(Intercept) 3.0000909  1.1247468 2.667348 0.025734051\nx1          0.5000909  0.1179055 4.241455 0.002169629\n\n$lm2\n            Estimate Std. Error  t value    Pr(&gt;|t|)\n(Intercept) 3.000909  1.1253024 2.666758 0.025758941\nx2          0.500000  0.1179637 4.238590 0.002178816\n\n$lm3\n             Estimate Std. Error  t value    Pr(&gt;|t|)\n(Intercept) 3.0024545  1.1244812 2.670080 0.025619109\nx3          0.4997273  0.1178777 4.239372 0.002176305\n\n$lm4\n             Estimate Std. Error  t value    Pr(&gt;|t|)\n(Intercept) 3.0017273  1.1239211 2.670763 0.025590425\nx4          0.4999091  0.1178189 4.243028 0.002164602\n\n# Preparing for the plots\nop &lt;- par(mfrow = c(2, 2), mar = 0.1+c(4,4,1,1), oma =  c(0, 0, 2, 0))\n\n# Plot charts using for loop\nfor(i in 1:4) {\n  ff[2:3] &lt;- lapply(paste0(c(\"y\",\"x\"), i), as.name)\n  plot(ff, data = anscombe, col = \"darkgreen\", pch = 17, bg = \"seagreen3\", cex = 1.2,\n       xlim = c(3, 19), ylim = c(3, 13))\n  abline(mods[[i]], col = \"indianred3\")\n}\nmtext(\"Anscombe's 4 Regression data sets\", outer = TRUE, cex = 1.5)\n\n\n\npar(op)\n\n\n#ANSWERS\n#Part A\n#Anscombe's Quartet is an extremely interesting dataset to oberve. From the first glance, we can\n#see that all the regression models look different but each model has the same descriptive statistics. These graphs #are a way to show how important a grpah's visulaisation is when we are analysing data. \n\n#Regression 1 shows that we have a linear relationaship with good enough trend line.\n#Regression 2 shows a non-linear relationship \n#Regression 3 also has a linear relationship but we can observe the outlier in the graph.\n#Regression 4 doesn't show any particular relationship but we can see that the outlier has a great impact on the #fitted line. \n#The interesting part about all 4 graphs is that their fitted lines are the same. This tells us how valuable each point is while estimating the trend line. For instance, regression 4 has one outlier but that outlier's value is high enough to dictate the trend line which shows a linear relationship between the variables. \n\n\n#Q2\n### Paul Murrell's R examples (selected)\n\n## Start plotting from basics \n# Note the order\nplot(pressure, pch=12)  # Can you change pch? Changed from 16 to 12\ntext(150, 600, \n     \"Pressure (mm Hg)\\nversus\\nTemperature (Celsius)\")\n\n\n\n#  Examples of standard high-level plots \n#  In each case, extra output is also added using low-level \n#  plotting functions.\n# \n\npar(family = \"serif\", cex.axis = 1.2)\n\n# Setting the parameter (3 rows by 2 cols)\npar(mfrow=c(3, 2))\n\n# Scatterplot\n# Note the incremental additions\n\nx &lt;- c(0.5, 2, 4, 8, 12, 16)\ny1 &lt;- c(1, 1.3, 1.9, 3.4, 3.9, 4.8)\ny2 &lt;- c(4, .8, .5, .45, .4, .3)\n# Setting label orientation, margins c(bottom, left, top, right) & text size\npar(las=1, mar=c(4, 4, 2, 4), cex=.7) \nplot.new()\nplot.window(range(x), c(0, 6))\nlines(x, y1)\nlines(x, y2)\npoints(x, y1, pch=16, cex=1.5) # Try different cex value?  \npoints(x, y2, pch=22, bg=\"thistle2\", cex=2)  # Different background color\npar(col=\"gray60\", fg=\"gray60\", col.axis=\"gray60\")\naxis(1, at=seq(0, 16, 4)) # What is the first number standing for?\n#The value 1 indicates that we are referring to the x-axis)\naxis(2, at=seq(0, 6, 2))\naxis(4, at=seq(0, 6, 2))\nbox(bty=\"u\")\nmtext(\"Travel Time (s)\", side=1, line=2, cex=0.8)\nmtext(\"Responses per Travel\", side=2, line=2, las=0, cex=0.8)\nmtext(\"Responses per Second\", side=4, line=2, las=0, cex=0.8)\ntext(4, 5, \"Bird 131\")\npar(mar=c(5.1, 4.1, 4.1, 2.1), col=\"black\", fg=\"black\", col.axis=\"black\")\n\n# Histogram\n# Random data\nY &lt;- rnorm(50)\n# Make sure no Y exceed [-3.5, 3.5]\nY[Y &lt; -3.5 | Y &gt; 3.5] &lt;- NA # Selection/set range\nx &lt;- seq(-3.5, 3.5, .1)\ndn &lt;- dnorm(x)\npar(mar=c(4.5, 4.1, 3.1, 0))\nhist(Y, breaks=seq(-3.5, 3.5), ylim=c(0, 0.5), \n     col=\"seashell1\", freq=FALSE)\nlines(x, dnorm(x), lwd=2)\npar(mar=c(5.1, 4.1, 4.1, 2.1))\n\n# Barplot\npar(mar=c(2, 3.1, 2, 2.1)) \nmidpts &lt;- barplot(VADeaths, \n                  col=gray(0.1 + seq(1, 9, 2)/11), \n                  names=rep(\"\", 4))\nmtext(sub(\" \", \"\\n\", colnames(VADeaths)),\n      at=midpts, side=1, line=0.5, cex=0.5)\ntext(rep(midpts, each=5), apply(VADeaths, 2, cumsum) - VADeaths/2,\n     VADeaths, \n     col=rep(c(\"white\", \"black\"), times=3:2), \n     cex=0.8)\npar(mar=c(5.1, 4.1, 4.1, 2.1)) \n\n# Boxplot\npar(mar=c(3, 4.1, 2, 0))\nboxplot(len ~ dose, data = ToothGrowth,\n        boxwex = 0.25, at = 1:3 - 0.2,\n        subset= supp == \"VC\", col=\"gray80\",\n        xlab=\"\",\n        ylab=\"tooth length\", ylim=c(0,35))\nmtext(\"Vitamin C dose (mg)\", side=1, line=2.5, cex=0.8)\nboxplot(len ~ dose, data = ToothGrowth, add = TRUE,\n        boxwex = 0.25, at = 1:3 + 0.2,\n        \n        subset= supp == \"OJ\")\nlegend(1.5, 9, c(\"Ascorbic acid\", \"Orange juice\"), \n       fill = c(\"ivory\", \"snow4\"), \n       bty=\"n\")\npar(mar=c(5.1, 4.1, 4.1, 2.1))\n\n\n# Persp\nx &lt;- seq(-10, 10, length= 30)\ny &lt;- x\nf &lt;- function(x,y) { r &lt;- sqrt(x^2+y^2); 10 * sin(r)/r }\nz &lt;- outer(x, y, f)\nz[is.na(z)] &lt;- 1\n# 0.5 to include z axis label\npar(mar=c(0, 0.5, 0, 0), lwd=0.5)\npersp(x, y, z, theta = 30, phi = 30, \n      expand = 0.5)\npar(mar=c(5.1, 4.1, 4.1, 2.1), lwd=1)\n\n# Piechart\npar(mar=c(0, 2, 1, 2), xpd=FALSE, cex=0.5)\npie.sales &lt;- c(0.12, 0.3, 0.26, 0.16, 0.04, 0.12)\nnames(pie.sales) &lt;- c(\"Blueberry\", \"Cherry\",\n                      \"Apple\", \"Boston Cream\", \"Other\", \"Vanilla\")\npie(pie.sales, col = c(\"lightpink\", \"lightgreen\", \"lightblue\", \"lightyellow\", \"tan1\", \"lightcyan\")) # Custom colors\n\n\n\n\n\n#Q4 - Prehackathon\n\n## Download COVID data from OWID GitHub\nowidall = read.csv(\"https://github.com/owid/covid-19-data/blob/master/public/data/owid-covid-data.csv?raw=true\")\n# Deselect cases/rows with OWID\nowidall = owidall[!grepl(\"^OWID\", owidall$iso_code), ]\n# Subset by continent: Europe\nowideu = subset(owidall, continent==\"Europe\")\n\n#selected_countries &lt;- c(\"Spain\", \"Germany\", \"Ukraine\", \"Italy\")\n#owideu_selected &lt;- subset(owideu, location %in% selected_countries)\n\n# Change NA values to 0 for total deaths\n#owideu[\"total_deaths\"][is.na(owideu[\"total_deaths\"])] &lt;- 0\n\nlibrary(ggplot2)\n\ndates &lt;- c(\"2020-01\", \"2020-02\", \"2020-04\", \"2020-06\", \"2020-08\", \n           \"2020-10\", \"2020-11\", \"2021-01\", \"2021-03\", \"2021-05\", \"2021-07\", \n           \"2021-08\", \"2021-10\", \"2021-12\", \"2022-04\", \"2022-06\", \"2022-09\", \n           \"2022-11\", \"2023-01\", \"2023-03\", \"2023-04\", \"2023-06\", \"2023-08\")\n\nvariable &lt;- ggplot(owideu, aes(x=date, y=new_deaths)) + geom_point(color='deeppink') + scale_y_continuous(limits=c(0, 7000)) + \n  xlab(\"Date\") + ylab(\"COVID Deaths in Europe (Daily)\")\n \nvariable\n\nWarning: Removed 49 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n# Q3 EXAMPLE USING GGPLOT\n\n# Create a ggplot for the first regression model (lm1)\nggplot(anscombe, aes(x = x1, y = y1)) +\n  geom_point(colour = \"darkgreen\", size = 3, shape = 6, fill = \"seagreen3\") +\n  geom_abline(intercept = coef(lm1)[1], slope = coef(lm1)[2], color = \"indianred3\") +\n  xlim(3, 19) + ylim(3, 13) +\n  labs(title = \"Regression Plot (lm1)\",\n       x = \"X1\",\n       y = \"Y1\") +\n  theme_minimal()"
  },
  {
    "objectID": "Assignment4.html",
    "href": "Assignment4.html",
    "title": "Assignment 4",
    "section": "",
    "text": "# Hackathon \n\n\n#Graph 1\n\nlibrary(ggplot2)\n\nsales_data &lt;- data.frame(\n  Fruit = c(\"Small Apples\", \"Medium Apples\", \"Large Apples\", \"Small Oranges\", \"Large Oranges\"),\n  Quantity = c(10, 15, 20, 8, 25),\n  Width = c(0.3, 0.5, 0.7, 0.3, 0.7)  # Specify the widths for each bar\n)\n\nchart1 &lt;- ggplot(sales_data, aes(x = Fruit, y = Quantity, width = Width)) +\n  geom_bar(stat = \"identity\", fill = \"coral\") +\n  labs(title = \"Sales for Fruits of Different Sizes\", x = \"Fruit\", y = \"Quantity Sold\") +\n  theme(text=element_text(size=12,  family=\"serif\"), plot.title = element_text(hjust = 0.5))\n  \nprint(chart1)\n\n\n\n\n\n#install.packages(\"gridExtra\")\nlibrary(gridExtra)\n\ndata1 &lt;- data.frame(\n  Product = c(\"A\", \"B\", \"C\", \"D\"),\n  Revenue = c(5000, 7000, 6500, 3000)\n)\n\ndata2 &lt;- data.frame(\n  Product = c(\"A\", \"B\", \"C\", \"D\"),\n  Revenue = c(2000, 5000, 6000, 1000)\n)\n\nstore1 &lt;- ggplot(data1, aes(x = Product, y = Revenue)) +\n  geom_bar(stat = \"identity\", fill = \"midnightblue\", alpha = 0.7) +\n  labs(title = \"Store 1: Product Revenue\", x = \"Product Type\", y = \"Revenue (USD)\") +\n  theme(text=element_text(size=12, family=\"serif\"), plot.title = element_text(hjust = 0.5))\n\nstore2 &lt;- ggplot(data2, aes(x = Product, y = Revenue)) +\n  geom_bar(stat = \"identity\", fill = \"seagreen4\", alpha = 0.7) +\n  labs(title = \"Store 2: Product Revenue\", x = \"Product Type\", y = \"Revenue (USD)\") +\n  theme(text=element_text(size=12, family=\"serif\"), plot.title = element_text(hjust = 0.5))\n\ncombined_chart &lt;- grid.arrange(store1, store2, ncol = 2)\n\n\n\n\n\nsales_data &lt;- data.frame(\n  Fruit = c(\"Apples\", \"Oranges\", \"Pears\", \"Kiwis\", \"Bananas\", \"Pineapples\", \"Peaches\"),\n  Quantity = c(10, 15, 20, 8, 25, 12, 18)\n)\n\nchart3 &lt;- ggplot(sales_data, aes(x = Quantity, y = Fruit)) +\n  geom_bar(stat = \"identity\", fill = \"darkslategray4\") +\n  labs(title = \"Sales for Different Fruits\", x = \"Quantity Sold\", y = \"Type of Fruit\") + \n  theme(text=element_text(size=12, family=\"serif\"), plot.title = element_text(hjust = 0.5))\n\nprint(chart3)\n\n\n\n\n\nhobbies &lt;- c(\"Baking\", \"Drawing\", \"Reading\")\ndata1 &lt;- c(20, 30, 15)\ndata2 &lt;- c(25, 15, 10)\ndata3 &lt;- c(15, 10, 13)\n\ndata_matrix &lt;- matrix(c(data1, data2, data3), nrow = length(hobbies), byrow = TRUE)\n\nbar_colors &lt;- c(\"firebrick\", \"navajowhite3\", \"darkolivegreen\")\nbar_labels &lt;- c(\"Yes\", \"No\", \"Maybe\")\n\nbarplot(data_matrix, beside = TRUE, col = bar_colors, names.arg = hobbies, main = \"Survey Reponses to Hobby Interests\", xlab = \"Hobby Categories\", ylab = \"Total Number of Reponses\", family=\"serif\")\n\nlegend(\"topright\", legend = bar_labels, fill = bar_colors)"
  },
  {
    "objectID": "Assignment5.html",
    "href": "Assignment5.html",
    "title": "Assignment 5",
    "section": "",
    "text": "# Generate random traffic data\nset.seed(123)  # Set seed for reproducibility\ntraffic_data &lt;- rpois(100, lambda = 20)  # Simulate traffic data with an average of 20 vehicles\n\n# Create a histogram\nhist(traffic_data, \n     main = \"Traffic Histogram\",\n     xlab = \"Number of Vehicles\",\n     ylab = \"Frequency\",\n     col = \"plum\",  # Color of the bars\n     border = \"black\",  # Border color of the bars\n     xlim = c(0, max(traffic_data) + 5))  # Set the x-axis limits\n\n\n\n\n\n# Sample grades data\nstudents &lt;- c(\"Student A\", \"Student B\", \"Student C\", \"Student D\", \"Student E\")\ngrades &lt;- c(90, 85, 78, 92, 88)\n\n# Create a vertical bar chart\nbar_heights &lt;- grades\nbar_names &lt;- students\n\n# Set up the plotting area\npar(mar=c(5, 4, 4, 6))  # Adjust margins for labels\n\n# Create the bar chart\nbarplot(bar_heights, names.arg=bar_names, main=\"Economics Class Grades\", \n        xlab=\"Students\", ylab=\"Grades\", col=\"lightyellow\", ylim=c(0, 100))\n\n# Add a legend (optional)\nlegend(\"topright\", legend=\"Grades\", fill=\"lightyellow\")\n\n\n\n\n\n# Sample data for favorite cuisines\ncuisines &lt;- c(\"Italian\", \"Mexican\", \"Japanese\", \"Indian\", \"Chinese\")\nvotes &lt;- c(15, 12, 9, 10, 8)\n\n# Set wider right margin to create space for labels\npar(mar=c(5, 5, 4, 10))  # c(bottom, left, top, right)\n\n# Create a horizontal bar chart with fixed labels on the y-axis\nbarplot(votes, names.arg=cuisines, main=\"Favorite Cuisines\", xlab=\"Votes\", horiz=TRUE, col=\"skyblue\", las=1)\n\n\n\n\n\n# Sample data\nfruits &lt;- c(\"Apple\", \"Banana\", \"Orange\", \"Grapes\", \"Mango\")\ncounts &lt;- c(15, 20, 10, 12, 18)\n\n# You can also add percentages to the slices\npct &lt;- round(counts / sum(counts) * 100, 1)\nlabel &lt;- paste(fruits, \": \", pct, \"%\", sep = \"\")\npie(counts, labels = label, main = \"Favorite Fruits\")\n\n\n\n# Sample data for the top 5 countries and their World Cup wins\ncountries &lt;- c(\"Brazil\", \"Germany\", \"Italy\", \"Argentina\", \"France\")\nworld_cup_wins &lt;- c(5, 4, 4, 2, 2)\n\n# Create a scatterplot\nplot(x = 1:5, y = world_cup_wins, type = \"n\", xlab = \"Country\", ylab = \"World Cup Wins\", main = \"FIFA World Cup Wins for Top 5 Countries\")\npoints(x = 1:5, y = world_cup_wins, pch = 11, col = \"mediumpurple\")\ntext(x = 1:5, y = world_cup_wins + 0.2, labels = countries, pos = 3, col = \"black\")\n\n# Add gridlines (optional)\ngrid()\n\n# Customize axis labels\naxis(1, at = 1:5, labels = countries, las = 1)  # x-axis labels\n\n# Add a legend (optional)\nlegend(\"topright\", legend = \"World Cup Wins\", col = \"mediumpurple\", pch = 11)\n\n\n\n\n\n# Generate random data for three groups\nset.seed(123)  # Setting seed for reproducibility\ngroup1 &lt;- rnorm(50, mean=0, sd=1)\ngroup2 &lt;- rnorm(50, mean=2, sd=1)\ngroup3 &lt;- rnorm(50, mean=1, sd=2)\n\n# Combine the data into a list\ndata &lt;- list(Group1 = group1, Group2 = group2, Group3 = group3)\n\n# Create a boxplot\nboxplot(data, main=\"Group Activity W\", xlab=\"Groups\", ylab=\"Wins\")\n\n\n\n\n\n# Load the necessary libraries\nlibrary(ggplot2)\n\n# Generate random traffic data\nset.seed(123)\ntraffic_data &lt;- rpois(100, lambda = 20)\ntraffic_df &lt;- data.frame(Count = traffic_data)\n\n# Create a histogram using ggplot2\nhistogram &lt;- ggplot(traffic_df, aes(x = Count)) +\n  geom_histogram(binwidth = 1, fill = \"plum\", color = \"black\") +\n  labs(title = \"Traffic Histogram\", x = \"Number of Vehicles\", y = \"Frequency\") +\n  xlim(0, max(traffic_data) + 5)\n\n# Sample grades data\nstudents &lt;- c(\"Student A\", \"Student B\", \"Student C\", \"Student D\", \"Student E\")\ngrades &lt;- c(90, 85, 78, 92, 88)\n\n# Create a data frame with matching number of rows\ngrades_df &lt;- data.frame(Student = students, Grade = grades)\n\n# Create a vertical bar chart using ggplot2\nbar_chart &lt;- ggplot(grades_df, aes(x = Student, y = Grade)) +\n  geom_bar(stat = \"identity\", fill = \"lightyellow\") +\n  labs(title = \"Economics Class Grades\", x = \"Students\", y = \"Grades\") +\n  ylim(0, 100) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels\n\n# Sample data for favorite cuisines\ncuisines_df &lt;- data.frame(Cuisine = cuisines, Votes = votes)\n\n# Create a horizontal bar chart using ggplot2\nhorizontal_bar &lt;- ggplot(cuisines_df, aes(x = Votes, y = Cuisine)) +\n  geom_bar(stat = \"identity\", fill = \"skyblue\") +\n  labs(title = \"Favorite Cuisines\", x = \"Votes\", y = NULL) +\n  theme(axis.text.y = element_text(hjust = 0))\n\n# Sample data for favorite fruits\nfruits_df &lt;- data.frame(Fruit = fruits, Counts = counts)\n\n# Create a pie chart using ggplot2 with percentage labels\npie_chart &lt;- ggplot(fruits_df, aes(x = \"\", y = Counts, fill = Fruit)) +\n  geom_bar(stat = \"identity\") +\n  coord_polar(\"y\", start = 0) +\n  labs(title = \"Favorite Fruits\") +\n  theme_void() +\n  theme(legend.position = \"top\") +\n  geom_text(aes(label = scales::percent(Counts / sum(counts), accuracy = 0.1)),\n            position = position_stack(vjust = 0.5),\n            color = \"white\")\n\n# Print the pie chart with percentage labels\n#print(pie_chart)\n\n# Generate random data for boxplot\nset.seed(123)\ngroup1 &lt;- rnorm(50, mean = 0, sd = 1)\ngroup2 &lt;- rnorm(50, mean = 2, sd = 1)\ngroup3 &lt;- rnorm(50, mean = 1, sd = 2)\nboxplot_data &lt;- data.frame(Group = factor(rep(c(\"Group1\", \"Group2\", \"Group3\"), each = 50)), Wins = c(group1, group2, group3))\n\n# Create a boxplot using ggplot2\nbox_plot &lt;- ggplot(boxplot_data, aes(x = Group, y = Wins)) +\n  geom_boxplot(fill = \"palegreen3\") +\n  labs(title = \"Group Activity Wins\", x = \"Groups\", y = \"Wins\")\n\n# Sample data for the top 5 countries and their World Cup wins\ncountries &lt;- c(\"Brazil\", \"Germany\", \"Italy\", \"Argentina\", \"France\")\nworld_cup_wins &lt;- c(5, 4, 4, 2, 2)\n\n# Create a data frame with the data\ndata &lt;- data.frame(Country = countries, Wins = world_cup_wins)\n\n# Create a scatterplot using ggplot2\nscatterplot &lt;- ggplot(data, aes(x = Country, y = Wins)) +\n  geom_point(size = 3, color = \"mediumpurple\", pch = 11) +\n  labs(title = \"FIFA World Cup Wins for Top 5 Countries\", x = \"Country\", y = \"World Cup Wins\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels\n\n# Print each plot one below the other\nprint(histogram)\n\nWarning: Removed 2 rows containing missing values (`geom_bar()`).\n\n\n\n\nprint(bar_chart)\n\n\n\nprint(horizontal_bar)\n\n\n\nprint(pie_chart)\n\n\n\nprint(box_plot)\n\n\n\nprint(scatterplot)\n\n\n\n\n\n# Load the necessary libraries\nlibrary(ggplot2)\n\n# Sample data for favorite fruits\nfruits_df &lt;- data.frame(Fruit = fruits, Counts = counts)\n\n# Create a pie chart using ggplot2 with percentage labels\npie_chart &lt;- ggplot(fruits_df, aes(x = \"\", y = Counts, fill = Fruit)) +\n  geom_bar(stat = \"identity\") +\n  coord_polar(\"y\", start = 0) +\n  labs(title = \"Favorite Fruits\") +\n  theme_void() +\n  theme(legend.position = \"top\") +\n  geom_text(aes(label = scales::percent(Counts / sum(counts), accuracy = 0.1)),\n            position = position_stack(vjust = 0.5),\n            color = \"white\")\n\n# Export the pie chart in different formats\nggsave(\"pie_chart.pdf\", plot = pie_chart, device = \"pdf\")\n\nSaving 7 x 5 in image\n\nggsave(\"pie_chart.jpg\", plot = pie_chart, device = \"jpeg\", dpi = 300)  # Specify dpi for jpg\n\nSaving 7 x 5 in image\n\nggsave(\"pie_chart.svg\", plot = pie_chart, device = \"svg\")\n\nSaving 7 x 5 in image\n\nggsave(\"pie_chart.tiff\", plot = pie_chart, device = \"tiff\")\n\nSaving 7 x 5 in image\n\nggsave(\"pie_chart.bmp\", plot = pie_chart, device = \"bmp\")\n\nSaving 7 x 5 in image"
  },
  {
    "objectID": "Assignment6.html",
    "href": "Assignment6.html",
    "title": "Assignment 6",
    "section": "",
    "text": "knitr::include_app(\"https://mumuksha22.shinyapps.io/DV12/\")"
  },
  {
    "objectID": "Assignment7.html",
    "href": "Assignment7.html",
    "title": "Assignment 7",
    "section": "",
    "text": "Shiny Hackathon\n\nDue to some error I was unable to upload my Shiny App on the website. However, I was responsible for making the bubble chart of our assignment."
  },
  {
    "objectID": "Assignment8.html",
    "href": "Assignment8.html",
    "title": "Assignment 8",
    "section": "",
    "text": "We used this time to work on our graphs for the final project. Our graphs can be found on our dashboard which is linked under the final project tab."
  },
  {
    "objectID": "Assignment10.html",
    "href": "Assignment10.html",
    "title": "Assignment 10",
    "section": "",
    "text": "## R Leaflet sample program \n## file: spatial_leaflet.R\n## Create an interactive map for web using ESRI Leaflet\n# Package:  leaflet, htmlwidgets, tidyverse\n\n## install.packages(c(\"htmlwidgets\", \"leaflet\", \"tidyverse\"))\nlibrary(htmlwidgets)\nlibrary(leaflet)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# Get EPPS geocode information (i.e. lon, lat) from online geocoder websites.\n# For example: https://www.mapdevelopers.com/geocode_tool.php\n\n# Create object using leaflet setting the view at EPPS geo location)\neppsmap &lt;- leaflet() %&gt;% setView(-96.7478372, 32.9886268, zoom=14)\n\n# Create object to acquire map data from ESRI\nesri &lt;- grep(\"^Esri\", providers, value = TRUE)\n\nfor (provider in esri) {\n  eppsmap &lt;- eppsmap %&gt;% addProviderTiles(provider, group = provider)\n}\n\nfindmeat &lt;- paste(sep = \"&lt;br/&gt;\",\n                  \"&lt;b&gt;&lt;a href='https://mumuksha22.github.io/Mumu/' target='_blank'&gt;Mumuksha Singla &lt;/a&gt;&lt;/b&gt;\",\n                  \"&lt;b&gt;&lt;a href='http://epps.utdallas.edu' target='_blank'&gt;School of Economic, &lt;/a&gt;&lt;/b&gt;\",\n                  \"&lt;b&gt;&lt;a href='http://epps.utdallas.edu' target='_blank'&gt;Political and Policy Sciences&lt;/a&gt;&lt;/b&gt;\",\n                  \"&lt;b&gt;&lt;a href='http://www.utdallas.edu' target='_blank'&gt;University of Texas at Dallas&lt;/a&gt;&lt;/b&gt;\",\n                  \"800 West Campbell Road\",\n                  \"Richardson TX 75080\"\n)\n\n# Use htmlwidget::onRender function to  add custom behavior to the leaflet map using native JavaScript.\n\neppsmap %&gt;%\n  addLayersControl(baseGroups = names(esri),\n                   options = layersControlOptions(collapsed = TRUE)) %&gt;%\n  # addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,\n  #           position = \"bottomleft\") %&gt;%\n  addMarkers(eppsmap, lng=-96.7478372, lat=32.9886268, popup=findmeat)  %&gt;%\n  htmlwidgets::onRender(\"\n                        function(el, x) {\n                        var myMap = this;\n                        myMap.on('baselayerchange',\n                        function (e) {\n                        myMap.minimap.changeLayer(L.tileLayer.provider(e.name));\n                        })\n                        }\")"
  },
  {
    "objectID": "finalproject.html",
    "href": "finalproject.html",
    "title": "Final Project",
    "section": "",
    "text": "Authors: Rishika Katamneni, Mumuksha Singla, Ashutosh Patel, and Priya Nalliah\nFinal Project Dashboard"
  },
  {
    "objectID": "Assignment9.html",
    "href": "Assignment9.html",
    "title": "Assignment 9",
    "section": "",
    "text": "#install.packages(\"quantmod\")\nlibrary(quantmod)\n\nLoading required package: xts\n\n\nLoading required package: zoo\n\n\n\nAttaching package: 'zoo'\n\n\nThe following objects are masked from 'package:base':\n\n    as.Date, as.Date.numeric\n\n\nLoading required package: TTR\n\n\nRegistered S3 method overwritten by 'quantmod':\n  method            from\n  as.zoo.data.frame zoo \n\nlibrary(dygraphs)\nlibrary(TSstudio)\n\n#quantmod::getSymbols(\"NFLX\", src=\"yahoo\")\n\nNFLX &lt;- getSymbols(\"NFLX\",\n                    from = \"2011/01/01\",\n                    to = \"2020/12/31\",\n                    periodicity = \"daily\",\n                    auto.assign = FALSE)\n\n\nsum(is.na(NFLX))\n\n[1] 0\n\n# class\n\nclass(NFLX)\n\n[1] \"xts\" \"zoo\"\n\nhead(NFLX)\n\n           NFLX.Open NFLX.High NFLX.Low NFLX.Close NFLX.Volume NFLX.Adjusted\n2011-01-03  25.00000  25.83857 24.78571   25.48714    39956000      25.48714\n2011-01-04  25.90714  26.41429 25.47000   25.91000    44065700      25.91000\n2011-01-05  25.87857  26.11286 25.53000   25.67571    31799600      25.67571\n2011-01-06  25.16857  25.67000 25.09286   25.42714    31991400      25.42714\n2011-01-07  25.52429  25.79286 25.19714   25.61429    22155000      25.61429\n2011-01-10  25.67143  26.85000 25.59714   26.84000    43674400      26.84000\n\nchartSeries(NFLX, type = c(\"auto\", \"candlesticks\", \"matchsticks\", \"bars\",\"line\"), subset='last 4 months',theme = \"white\")\n\n\n\n\n\nbarChart(NFLX,multi.col=TRUE,theme = 'white')\n\n\n\n\n\n# Plotting time series data using TSstudio\n# install.packages(c(\"quantmod\", \"tidyverse\",\"TSstudio\"))\n# lapply(c(\"quantmod\", \"tidyverse\",\"TSstudio\"), require, character.only = TRUE)\n\nlibrary(TSstudio)\nquantmod::getSymbols(\"AAPL\", src=\"yahoo\")\n\n[1] \"AAPL\"\n\nclass(AAPL)\n\n[1] \"xts\" \"zoo\"\n\nts_plot(AAPL$AAPL.Adjusted, \n        title = \"Apple Stock prices\",\n        Ytitle = \"\")\n\n\n\n\nclass(AAPL) # What class is this object?\n\n[1] \"xts\" \"zoo\""
  },
  {
    "objectID": "FinalProject.html",
    "href": "FinalProject.html",
    "title": "Final Project",
    "section": "",
    "text": "Authors: Mumuksha Singla\nTest"
  }
]